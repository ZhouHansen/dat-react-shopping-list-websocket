# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := action_after_build
### Rules for action "move_lib":
quiet_cmd_binding_gyp_action_after_build_target_move_lib = ACTION binding_gyp_action_after_build_target_move_lib $@
cmd_binding_gyp_action_after_build_target_move_lib = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; cp "$(builddir)/cws.node" dist/cws_darwin_72.node

cws: obj := $(abs_obj)
cws: builddir := $(abs_builddir)
cws: export BUILT_FRAMEWORKS_DIR := ${abs_builddir}
cws: export BUILT_PRODUCTS_DIR := ${abs_builddir}
cws: export CONFIGURATION := ${BUILDTYPE}
cws: export PRODUCT_NAME := action_after_build
cws: export SDKROOT := 
cws: export SRCROOT := ${abs_srcdir}/
cws: export SOURCE_ROOT := ${SRCROOT}
cws: export TARGET_BUILD_DIR := ${abs_builddir}
cws: export TEMP_DIR := ${TMPDIR}
cws: TOOLSET := $(TOOLSET)
cws: $(builddir)/cws.node FORCE_DO_CMD
	$(call do_cmd,binding_gyp_action_after_build_target_move_lib)

all_deps += cws
action_binding_gyp_action_after_build_target_move_lib_outputs := cws


### Rules for final target.
# Build our special outputs first.
$(obj).target/action_after_build.stamp: | $(action_binding_gyp_action_after_build_target_move_lib_outputs)

# Preserve order dependency of special output on deps.
$(action_binding_gyp_action_after_build_target_move_lib_outputs): | $(builddir)/cws.node

$(obj).target/action_after_build.stamp: TOOLSET := $(TOOLSET)
$(obj).target/action_after_build.stamp: $(builddir)/cws.node FORCE_DO_CMD
	$(call do_cmd,touch)

all_deps += $(obj).target/action_after_build.stamp
# Add target alias
.PHONY: action_after_build
action_after_build: $(obj).target/action_after_build.stamp

# Add target alias to "all" target.
.PHONY: all
all: action_after_build

